package com.backend.domain.analysis.service;

import com.backend.domain.analysis.entity.AnalysisResult;
import com.backend.domain.analysis.lock.InMemoryLockManager;
import com.backend.domain.analysis.repository.AnalysisResultRepository;
import com.backend.domain.evaluation.service.EvaluationService;
import com.backend.domain.repository.dto.response.RepositoryData;
import com.backend.domain.repository.entity.Repositories;
import com.backend.domain.repository.repository.RepositoryJpaRepository;
import com.backend.domain.repository.service.RepositoryService;
import com.backend.global.exception.BusinessException;
import com.backend.global.exception.ErrorCode;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

@Slf4j
@Service
@RequiredArgsConstructor
public class AnalysisService {
    private final RepositoryService repositoryService;
    private final AnalysisResultRepository analysisResultRepository;
    private final EvaluationService evaluationService;
    private final RepositoryJpaRepository repositoryJpaRepository;
    private final SseProgressNotifier sseProgressNotifier;
    private final InMemoryLockManager lockManager;

    /* Analysis Î∂ÑÏÑù ÌîÑÎ°úÏÑ∏Ïä§ Ïò§ÏºÄÏä§Ìä∏Î†àÏù¥ÏÖò Îã¥Îãπ
    * 1. GitHub URL ÌååÏã± Î∞è Í≤ÄÏ¶ù
    * 2. Repository ÎèÑÎ©îÏù∏ÏùÑ ÌÜµÌïú Îç∞Ïù¥ÌÑ∞ ÏàòÏßë
    * 3. Evaluation ÎèÑÎ©îÏù∏ÏùÑ ÌÜµÌïú AI ÌèâÍ∞Ä
    * 4. Î∂ÑÏÑù Í≤∞Í≥º Ï†ÄÏû•
    * */
    @Transactional
    public Long analyze(String githubUrl, Long userId) {
        String[] repoInfo = parseGitHubUrl(githubUrl);
        String owner = repoInfo[0];
        String repo = repoInfo[1];

        String cacheKey = userId + ":" + githubUrl;

        if (!lockManager.tryLock(cacheKey)) {
            throw new BusinessException(ErrorCode.ANALYSIS_IN_PROGRESS);
        }

        try {
            sseProgressNotifier.notify(userId, "status", "Î∂ÑÏÑù ÏãúÏûë");

            // Repository Îç∞Ïù¥ÌÑ∞ ÏàòÏßë
            RepositoryData repositoryData;

            try {
                repositoryData = repositoryService.fetchAndSaveRepository(owner, repo, userId);
                lockManager.refreshLock(cacheKey);
                log.info("ü´† Repository Data ÏàòÏßë ÏôÑÎ£å: {}", repositoryData);
            } catch (BusinessException e) {
                log.error("Repository Îç∞Ïù¥ÌÑ∞ ÏàòÏßë Ïã§Ìå®: {}/{}", owner, repo, e);
                throw handleRepositoryFetchError(e, owner, repo);
            }

            Repositories savedRepository = repositoryJpaRepository
                    .findByHtmlUrl(repositoryData.getRepositoryUrl())
                    .orElseThrow(() -> new BusinessException(ErrorCode.GITHUB_REPO_NOT_FOUND));

            Long repositoryId = savedRepository.getId();

            // OpenAI API Îç∞Ïù¥ÌÑ∞ Î∂ÑÏÑù Î∞è Ï†ÄÏû•
            try {
                evaluationService.evaluateAndSave(repositoryData);
                lockManager.refreshLock(cacheKey);
            } catch (BusinessException e) {
                sseProgressNotifier.notify(userId, "error", "AI ÌèâÍ∞Ä Ïã§Ìå®: " + e.getMessage());
                throw e;
            }

            sseProgressNotifier.notify(userId, "complete", "ÏµúÏ¢Ö Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ±");
            return repositoryId;
        } finally {
            // ÎùΩ Ìï¥Ï†ú
            lockManager.releaseLock(cacheKey);
            log.info("Î∂ÑÏÑù ÎùΩ Ìï¥Ï†ú: cacheKey={}", cacheKey);
        }
    }

    private String[] parseGitHubUrl(String githubUrl) {
        log.info("üö© Î∂ÑÏÑù ÏöîÏ≤≠ url: {}", githubUrl);

        if (githubUrl == null) {
            throw new BusinessException(ErrorCode.INVALID_GITHUB_URL);
        }

        if (!githubUrl.startsWith("https://github.com/")) {
            throw new BusinessException(ErrorCode.INVALID_GITHUB_URL);
        }

        String path = githubUrl.replace("https://github.com/", "");
        if (path.endsWith("/")) {
            path = path.substring(0, path.length() - 1);
        }

        String[] parts = path.split("/");
        if (parts.length < 2 || parts[0].trim().isEmpty() || parts[1].trim().isEmpty()) {
            throw new BusinessException(ErrorCode.INVALID_REPOSITORY_PATH);
        }

        log.info("üö© ÌååÏã± ÏôÑÎ£å - owner: '{}', repo: '{}'", parts[0].trim(), parts[1].trim());
        return new String[]{parts[0].trim(), parts[1].trim()};
    }

    // Repository Îç∞Ïù¥ÌÑ∞ ÏàòÏßë Ï§ë Î∞úÏÉùÌïú ÏòàÏô∏ Ï≤òÎ¶¨
    private BusinessException handleRepositoryFetchError(BusinessException e, String owner, String repo) {
        return switch (e.getErrorCode()) {
            case GITHUB_REPO_NOT_FOUND ->
                    new BusinessException(ErrorCode.GITHUB_REPO_NOT_FOUND);
            case GITHUB_RATE_LIMIT_EXCEEDED ->
                    new BusinessException(ErrorCode.GITHUB_RATE_LIMIT_EXCEEDED);
            default -> e;
        };
    }

    // ÌäπÏ†ï RepositoryÏùò Î™®Îì† Î∂ÑÏÑù Í≤∞Í≥º Ï°∞Ìöå (ÏµúÏã†Ïàú)
    public List<AnalysisResult> getAnalysisResultList(Long repositoryId){
        return analysisResultRepository.findAnalysisResultByRepositoriesId(repositoryId);
    }

    // Î∂ÑÏÑù Í≤∞Í≥º IDÎ°ú Îã®Í±¥ Ï°∞Ìöå
    public AnalysisResult getAnalysisById(Long analysisId) {
        return analysisResultRepository.findById(analysisId)
                .orElseThrow(() -> new BusinessException(ErrorCode.ANALYSIS_NOT_FOUND));
    }

    // Repository ÏÇ≠Ï†ú
    @Transactional
    public void delete(Long repositoriesId, Long userId){
        if (repositoriesId == null) {
            throw new BusinessException(ErrorCode.INVALID_INPUT_VALUE);
        }

        Repositories targetRepository = repositoryJpaRepository.findById(repositoriesId)
                .orElseThrow(() -> new BusinessException(ErrorCode.GITHUB_REPO_NOT_FOUND));

        if (!targetRepository.getUser().getId().equals(userId)) {
            throw new BusinessException(ErrorCode.FORBIDDEN);
        }

        repositoryJpaRepository.delete(targetRepository);
    }

    // ÌäπÏ†ï Î∂ÑÏÑù Í≤∞Í≥º ÏÇ≠Ï†ú
    @Transactional
    public void deleteAnalysisResult(Long analysisResultId, Long repositoryId, Long memberId) {
        if (analysisResultId == null) {
            throw new BusinessException(ErrorCode.INVALID_INPUT_VALUE);
        }

        AnalysisResult analysisResult = analysisResultRepository.findById(analysisResultId)
                .orElseThrow(() -> new BusinessException(ErrorCode.ANALYSIS_NOT_FOUND));

        if (!analysisResult.getRepositories().getId().equals(repositoryId)) {
            throw new BusinessException(ErrorCode.INVALID_INPUT_VALUE);
        }

        if (!analysisResult.getRepositories().getUser().getId().equals(memberId)) {
            throw new BusinessException(ErrorCode.FORBIDDEN);
        }

        analysisResultRepository.delete(analysisResult);
    }

    // Î∂ÑÏÑù Í≤∞Í≥º Í≥µÍ∞ú Ïó¨Î∂Ä Î≥ÄÍ≤Ω
    @Transactional
    public Repositories updatePublicStatus(Long repositoryId, Long memberId) {
        Repositories repository = repositoryJpaRepository.findById(repositoryId)
                .orElseThrow(() -> new BusinessException(ErrorCode.GITHUB_REPO_NOT_FOUND));

        if (!repository.getUser().getId().equals(memberId)) {
            throw new BusinessException(ErrorCode.FORBIDDEN);
        }

        boolean newStatus = !repository.isPublic();

        if (newStatus) {
            long analysisCount = analysisResultRepository
                    .countByRepositoriesId(repositoryId);

            if (analysisCount == 0) {
                throw new BusinessException(ErrorCode.ANALYSIS_NOT_FOUND);
            }
        }

        repository.updatePublicStatus(newStatus);
        return repository;
    }
}
